}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
CharlieSourceCpp('code/cpp/pixelOpt.cpp', sanitize = F)
# set.seed(123)
Nevent = 100L
Ndim = 5L
NcoreEvents = 20L
eventBitsNM = matrix(runif(Nevent * Ndim, min = -1e300, max = 1e300), nrow = Ndim)
Ncand = sample(NcoreEvents, 1)
candMat = matrix(unlist(lapply(1:(Nevent - NcoreEvents), function(x)
{
sample(NcoreEvents, Ncand) - 1L
})), nrow = Ncand)
rst = bitXorNN(eventBitsNM,
candMat,
maxCore = 1,
verbose = F, returnDist = T)
eventBitsNMBool = numMat2boolMat(eventBitsNM)
eventBitsNMBoolNonCore = eventBitsNMBool[, -(1:NcoreEvents)]
rstTrue = list()
rstTrueDs = list()
for (i in 1:ncol(eventBitsNMBoolNonCore))
{
e = eventBitsNMBoolNonCore[, i]
cs = candMat[, i]
ds = list()
for (cc in cs)
{
cce = eventBitsNMBool[, cc + 1L]
ds[[length(ds) + 1L]] = sum(e != cce)
}
ds = unlist(ds)
tmp = sortFun(cs, ds)
rstTrueDs[[length(rstTrueDs) + 1L]] = tmp[[2]]
rstTrue[[length(rstTrue) + 1L]] = tmp[[1]]
}
rstTrue = matrix(unlist(rstTrue), nrow = Ncand)
rstTrueDs = matrix(unlist(rstTrueDs), nrow = Ncand)
all(rstTrue == rst$nn)
all(rst$nnDs == rstTrueDs)
nns = bitXorNN(eventBits, cands, maxCore = 1000)
str(nns)
gc()
file.edit('/finance_develop/Charlie/vipCodes/py/CharlieSourceCpp.py')
reticulate::repl_python()
setwd('/finance_develop/Charlie/vipCodes/anEAoptExampleForXiang/')
Rcpp::sourceCpp("tests/GA.cpp", verbose = 1)
setwd('../../')
list.files()
setwd("/finance_develop/Charlie/vipCodes/cpp/tests")
setwd('../')
Rcpp::sourceCpp("tests/GA.cpp", verbose = 1)
initxy = runif(2, -10, 10)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 7000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 30, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 25, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 25, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 25, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1000)
tmp = testGA(initxy = initxy, initNoise = 1, minNoise = 1e-6,
popuSize = 100, survivalSize = 25, maxGen = 1000,
Ngen2minNoise = 70, reproduceSelection = "",
randomSeed = 42, maxCore = 1000)
Rcpp::sourceCpp("tests/GA.cpp", verbose = 1)
setwd("/finance_develop/Charlie/vipCodes/anEAoptExampleForXiang")
list.files()
reticulate::repl_python()
