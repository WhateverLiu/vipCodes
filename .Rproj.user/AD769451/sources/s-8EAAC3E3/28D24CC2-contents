

popuvar = function(x) { var(x) * (length(x) - 1) / length(x)  }
sampleSize = 10L


x = rgamma(sampleSize, shape = 5, scale = 1)
# x = rnorm(sampleSize)
X = keyALGs::emp(sort(x), N = 100)
y = rgamma(sampleSize, shape = 1, scale = 1)
# y = rnorm(sampleSize)
Y = keyALGs::emp(sort(y), N = 100)


Rcpp::sourceCpp("fmEngineSrc/inessentialTest007copulaMC.cpp", verbose = T)
Rcpp::sourceCpp("fmEngineSrc/MCagg.cpp", verbose = T)
Rcpp::sourceCpp("fmEngineSrc/agg.cpp")


x = samplePMF(X, sampleSize = sampleSize, seed = 42)
y = samplePMF(Y, sampleSize = sampleSize, seed = 42)


# Gaussian
if (F)
{
  
  r = 0.3
  x = sort(x)
  y = sort(y)
  tmp = MCgaussianCopulaTest(x, y, theta = r, maxCore = 13, seed = 42, decomp = F)
  cat("MCcor =", (var(tmp) - (var(x) + var(y))) / (2 * sqrt(var(x) * var(y))), "\n")
  
  
  distlist = list(X, Y)
  tmp2 = FENGINEaggGivenOrderSaveMixWeightOrGauCopulaCor(
    distlist = distlist, zeroBasedPairOrder = as.integer(c(0, 1)), 
    supervision = r, maxSupportSize = 256, losstype = "double", 
    probtype = "double", regridMethod = "lr", 
    convolutionMethod = "Given Gaussian copula correlation => recreate copula => model bivariate joint => integrate marginals as sum",
    headTrunc = 1e-10, tailTrunc = 1e-10, useFFT = F, printTime = F, considerNegCor = F, 
    degreeOfFreedom = 0)
  
  
  cat("PMFcor =", (keyALGs::Var(tmp2$final) - (keyALGs::Var(X) + keyALGs::Var(Y))) / 
    (sqrt((keyALGs::Var(X) * keyALGs::Var(Y))) * 2), "\n")
  
  
}


# Gumbel
if (F)
{
  
  
  x = sort(x)
  y = sort(y)
  
  
  theta = 1.2
  # sink("tmp.txt")
  system.time({
  tmp = MCgumbelCopulaTest(x, y, theta = theta, maxCore = 13, seed = 42, 
                           decomp = F, useMarshallOlkin = F)})
  # sink()
  # cat("MCcor =", (var(tmp) - (var(x) + var(y))) / (2 * sqrt(var(x) * var(y))), "\n")
  
  
  distlist = list(X, Y)
  tmp2 = FENGINEaggGivenOrderSaveMixWeightOrGauCopulaCor(
    distlist = distlist, zeroBasedPairOrder = as.integer(c(0, 1)), 
    supervision = theta, maxSupportSize = 256, losstype = "double", 
    probtype = "double", regridMethod = "lr", 
    convolutionMethod = "Given Gumbel copula parameter => recreate copula => model bivariate joint => integrate marginals as sum",
    headTrunc = 1e-10, tailTrunc = 1e-10, useFFT = F, printTime = F, considerNegCor = F, 
    degreeOfFreedom = 0)
  
  
  cat("PMFcor =", (keyALGs::Var(tmp2$final) - (keyALGs::Var(X) + keyALGs::Var(Y))) / 
        (sqrt((keyALGs::Var(X) * keyALGs::Var(Y))) * 2), "\n")
  
  
}


# Morgenstern
if (F)
{
  
  
  x = sort(x)
  y = sort(y)
  
  
  theta = 1.2
  # sink("tmp.txt")
  system.time({
    tmp = MCmorgensternCopulaTest(x, y, theta = theta, maxCore = 13, seed = 42,
      decomp = F)})
  # sink()
  cat("MCcor =", (var(tmp) - (var(x) + var(y))) / (2 * sqrt(var(x) * var(y))), "\n")
  
  
  distlist = list(X, Y)
  tmp2 = FENGINEaggGivenOrderSaveMixWeightOrGauCopulaCor(
    distlist = distlist, zeroBasedPairOrder = as.integer(c(0, 1)), 
    supervision = theta, maxSupportSize = 256, losstype = "double", 
    probtype = "double", regridMethod = "lr", 
    convolutionMethod = "Given Gumbel copula parameter => recreate copula => model bivariate joint => integrate marginals as sum",
    headTrunc = 1e-10, tailTrunc = 1e-10, useFFT = F, printTime = F, considerNegCor = F, 
    degreeOfFreedom = 0)
  
  
  cat("PMFcor =", (keyALGs::Var(tmp2$final) - (keyALGs::Var(X) + keyALGs::Var(Y))) / 
        (sqrt((keyALGs::Var(X) * keyALGs::Var(Y))) * 2), "\n")
  
  
}


# Joe
if (F)
{
  
  
  x = sort(x)
  y = sort(y)
  
  
  theta = 1.2
  # sink("tmp.txt")
  system.time({
    tmp = MCjoeCopulaTest(x, y, theta = theta, maxCore = 13, seed = 42,
                          decomp = F)})
  # sink()
  cat("MCcor =", (var(tmp) - (var(x) + var(y))) / (2 * sqrt(var(x) * var(y))), "\n")
  
  
  distlist = list(X, Y)
  tmp2 = FENGINEaggGivenOrderSaveMixWeightOrGauCopulaCor(
    distlist = distlist, zeroBasedPairOrder = as.integer(c(0, 1)), 
    supervision = theta, maxSupportSize = 256, losstype = "double", 
    probtype = "double", regridMethod = "lr", 
    convolutionMethod = "Given B05 copula parameter => recreate copula => model bivariate joint => integrate marginals as sum",
    headTrunc = 1e-10, tailTrunc = 1e-10, useFFT = F, printTime = F, considerNegCor = F, 
    degreeOfFreedom = 0)
  
  
  cat("PMFcor =", (keyALGs::Var(tmp2$final) - (keyALGs::Var(X) + keyALGs::Var(Y))) / 
        (sqrt((keyALGs::Var(X) * keyALGs::Var(Y))) * 2), "\n")
  
  
}


# Student's t
if (F)
{
  
  
  x = sort(x)
  y = sort(y)
  
  
  theta = 0.5
  # sink("tmp.txt")
  system.time({
    tmp = MCtCopulaTest(x, y, theta = theta, df = 3, maxCore = 1, seed = 42,
                        decomp = F)})
  # sink()
  cat("MCcor =", (var(tmp) - (var(x) + var(y))) / (2 * sqrt(var(x) * var(y))), "\n")
  
  
  distlist = list(X, Y)
  tmp2 = FENGINEaggGivenOrderSaveMixWeightOrGauCopulaCor(
    distlist = distlist, zeroBasedPairOrder = as.integer(c(0, 1)), 
    supervision = theta, maxSupportSize = 256, losstype = "double", 
    probtype = "double", regridMethod = "lr", 
    convolutionMethod = "Given Gaussian copula correlation => recreate copula => model bivariate joint => integrate marginals as sum",
    headTrunc = 1e-10, tailTrunc = 1e-10, useFFT = F, printTime = F, considerNegCor = F, 
    degreeOfFreedom = 3)
  
  
  cat("PMFcor =", (keyALGs::Var(tmp2$final) - (keyALGs::Var(X) + keyALGs::Var(Y))) / 
        (sqrt((keyALGs::Var(X) * keyALGs::Var(Y))) * 2), "\n")
  
  
}









# Test power transform
if (T)
{
  
  
  N = 1e6
  x = runif(N)
  targetMean = mean(x) * 0.5
  targetVar = var(x) * 2
  Rcpp::sourceCpp("MCagg.cpp")
  tmp = powerTransformMatchMeanVar(
    x, targetMean, targetVar, maxIter = 1e9, eps = 1e-6)
  c(mean(tmp), var(tmp) * ((N - 1) / N))
  c(targetMean, targetVar)
  
  
}















